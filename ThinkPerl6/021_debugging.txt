Debugging

One of the most important programming skills you will acquire is debugging.
Although it can sometimes be frustrating, debugging is one of the most intellectually
rich, challenging, and interesting parts of programming.

In some ways debugging is like detective work. You are confronted with clues and
you have to infer the processes and events that led to the results you see.

Debugging is also like an experimental science. Once you have an idea about what is
going wrong, you modify your program and try again. If your hypothesis was correct,
you can predict the result of the modification, and you take a step closer to a working
program. If your hypothesis was wrong, you have to come up with a new one. As
Sherlock Holmes pointed out, “...When you have eliminated the impossible, whatever
remains, however improbable, must be the truth” (A. Conan Doyle, The Sign of Four).

In cases where you are not able to come up with a hypothesis on what’s wrong, you
can try to introduce code that you expect to create a certain type of error, a “negative
hypothesis” if you will. Sometimes you can learn a lot from the fact that it didn’t cre‐
ate the error that was expected. Making a hypothesis does not necessarily mean you
have an idea about how to make the code work; it could also be a hypothesis on how
it should break.

For some people, programming and debugging are the same thing. That is, program‐
ming is the process of gradually debugging a program until it does what you want.
The idea is that you should start with a working program and make small modifica‐
tions, debugging them as you go.

For example, Linux is an operating system that contains millions of lines of code, but
it started out as a simple program Linus Torvalds used to explore the Intel 80386 chip.
According to Larry Greenfield, “One of Linus’s earlier projects was a program that
would switch between printing AAAA and BBBB . This later evolved to Linux.” (The
Linux Users’ Guide Beta Version 1).

