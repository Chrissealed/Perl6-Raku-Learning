Debugging

When you are debugging a program, and especially if you are working on a hard bug,
here are some things to try:

Reading
Examine your code, read it back to yourself, and check that it says what you
meant to say.

Running
Experiment by making changes and running different versions. Often if you dis‐
play the right thing at the right place in the program, the problem becomes obvi‐
ous, but sometimes you have to build scaffolding.

Running under a debugger
A debugger is a utility program that enables you to run a program step by step, so
you can follow the execution path and check the content of important variables at
crucial points in the program execution, set break points, etc. Perl 6 provides a
debugger, called perl6-debug, that makes all these things possible. With the
advent of modern high-level languages, many people balk at using a debugger.
This is a mistake. A debugger will not help solve every kind of problem, but it
can be immensely useful. See “Debugging” on page 266 for more information on
the Perl debugger.

Ruminating
Take some time to think! What kind of error is it: syntax, runtime, or semantic?
What information can you get from the error messages, or from the output of the
program? What kind of error could cause the problem you’re seeing? What did
you change last, before the problem appeared?

Rubber ducking
If you explain the problem to someone else, you sometimes find the answer
before you finish asking the question. Often you don’t need the other person; you
could just talk to a rubber duck. That’s the origin of the well-known strategy
called rubber duck debugging. I am not making this up; see https://en.wikipe
dia.org/wiki/Rubber_duck_debugging.

Retreating
At some point, the best thing to do is back off, undoing recent changes, until you
get back to a program that works and that you understand. Then you can start
rebuilding.

Beginning programmers sometimes get stuck on one of these activities and forget the
others. Each activity comes with its own failure mode.
For example, reading your code might help if the problem is a typographical error,
but not if the problem is a conceptual misunderstanding. If you don’t understand
what your program does, you can read it 100 times and never see the error, because
the error is in your head.

Running experiments can help, especially if you run small, simple tests. But if you run
experiments without thinking or reading your code, you might fall into a pattern we
call “random walk programming,” which is the process of making random changes
until the program does the right thing. Needless to say, random walk programming
can take a very long time.

You have to take time to think. Debugging is like an experimental science. You should
have at least one hypothesis about what the problem is. If there are two or more pos‐
sibilities, try to think of a test that would eliminate one of them.
But even the best debugging techniques will fail if there are too many errors, or if the
code you are trying to fix is too big and complicated. Sometimes the best option is to
retreat, simplifying the program until you get to something that works and that you
understand.

Beginning programmers are often reluctant to retreat because they can’t stand to
delete a line of code (even if it’s wrong). If it makes you feel better, copy your program
into another file before you start stripping it down. Then you can copy the pieces
back one at a time.

Finding a hard bug requires reading, running (with or without a debugger), ruminat‐
ing, and sometimes retreating. If you get stuck on one of these activities, try the oth‐
ers.

