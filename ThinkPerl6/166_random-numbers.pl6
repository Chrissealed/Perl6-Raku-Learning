#!/usr/bin/env perl6
#
# Random Numbers
#
# Given the same inputs, most computer programs generate the same outputs every
# time, so they are said to be deterministic. Determinism is usually a good thing, since
# we expect the same calculation to yield the same result. For some applications,
# though, we want the computer to be unpredictable. Games are an obvious example,
# but there are more.
#
# Making a program truly nondeterministic turns out to be difficult, but there are ways
# to make it at least seem nondeterministic. One of them is to use algorithms that gen‐
# erate pseudorandom numbers. Pseudorandom numbers are not truly random because
# they are generated by a deterministic computation, but just by looking at the numbers
# it is all but impossible to distinguish them from random.
#
# Perl provides functions such as rand that generate pseudorandom numbers (which
# we will simply call “random” numbers from here on).
# The function rand returns a random number (of Num type) between 0.0 and 1.0
# (including 0.0 but not 1.0). Each time you call rand , you get the next number in a
# long series. To see a sample, run this loop in the REPL:

say 'A:';
say rand for 1..5;

# Used as a method, rand returns a random number between 0.0 and the value of the
# invocant. For example, 10.rand returns a random number between 0 and 10 (10 not
# included). You might try it as a one-liner:
#
# $ perl6 -e 'say 10.rand for 1..5'
# 8.23987158729588
# 9.83276889381497
# 2.52313276833335
# 3.44713459548771
# 1.82329894347025
#
# You should hopefully get a different output than I did. If you want to run such a one-
# liner under Windows, remember that you’ll need to replace single quotes with double
# quotes.
#
# To obtain random integers between 1 and 10, you may use the Int and rand methods:
#
# $ perl6 -e 'say 10.rand.Int + 1 for 1..5'
# 5
# 10
# 1
# 6
# 3
#
# The pick function or method takes a number $count and a list as arguments and
# returns $count items chosen at random and without repetition. For example:

say 'B:';
say <1 3 4 5 7 9 10 12 14 42>.pick(5);
# (5 42 3 4 7)
say pick 5, <1 3 4 5 7 9 10 12 14 42>;
# (42 12 5 1 9)

# If $count is greater than or equal to the number of items of the list, then all elements
# from the list are returned in a random sequence.
#
# To obtain random unique integers in a range, you might use pick on a range:

say 'C:';
say pick 5, 1..20;
# (5 3 6 18 7)
say (1..20).pick(5);
# (20 4 18 2 7)
# If you don’t specify the number of random numbers, you’ll get one random pick:
say (1..20).pick;
# 19

