Flow of Execution

To ensure, for example, that a variable is defined (i.e., populated) before its first use,
you have to know the order statements run in, which is called the flow of execution.
Execution always begins at the first statement of the program (well, really almost
always, but let’s say always for the time being). Statements are run one at a time, in
order from top to bottom.

Subroutine definitions do not alter the flow of execution of the program, but remem‐
ber that statements inside a function don’t run until the function is called.
A function call is like a detour in the flow of execution. Instead of going to the next
statement, the flow jumps to the body of the function, runs the statements there, and
then comes back to pick up where it left off.
That sounds simple enough, until you remember that one function can call another.
While in the middle of one function, the program might have to run the statements
in another function. Then, while running that new function, the program might have
to run yet another function!
Fortunately, Perl is good at keeping track of where it is, so each time a function com‐
pletes, the program picks up where it left off in the function that called it. When it
gets to the end of the program, it terminates.
In summary, when you read a program, you don’t always want to read from top to
bottom. Sometimes it makes more sense if you follow the flow of execution.

