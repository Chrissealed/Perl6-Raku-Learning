Algorithms

Newton’s method is an example of an algorithm: it is a mechanical process for solving
a category of problems (in this case, computing square roots).
To understand what an algorithm is, it might help to start with something that is not
an algorithm. When you learned to multiply single-digit numbers, you probably
memorized the multiplication table. In effect, you memorized 100 specific solutions.
That kind of knowledge is not algorithmic.

But if you were “lazy,” you might have learned a few tricks. For example, to find the
product of n and 9, you can write n − 1 as the first digit and 10 − n as the second
digit. (For example, to figure out 9 * 7, n − 1 is 6 and 10 − n is 3, so the product 9 * 7 is
63.) This trick is a general solution for multiplying any single-digit number by 9.
That’s an algorithm!

Similarly, the techniques you learned in school for addition (with carrying), subtrac‐
tion (with borrowing), and long division are all algorithms. One of the characteristics
of algorithms is that they do not require any intelligence to carry out. They are
mechanical processes where each step follows from the last according to a simple set
of rules.

Executing algorithms is boring, but designing them is interesting, intellectually chal‐
lenging, and a central part of computer science.
Some of the things that people do naturally, without difficulty or conscious thought,
are the hardest to express algorithmically. Understanding natural language is a good
example. We all do it, but so far no one has been able to explain how we do it, at least
not in the form of an algorithm.

