
  Perl 6 cheat sheet v6 20171128


    Sigils



$scalar
@array
%hash
&code



    Major/minor contexts



item   list    sink
Str    flat/slice
Num    lazy/eager/hyper/race
Bool


    Access

	Arrays	Hashes
whole	@array[]	%hash{}
element	@array[0]	%hash{'a'}
%hash<a>
slice	@array[0,2]	%hash{'a','b'}
%hash<a b>


    Twigils



$normal-lexical
$?compiler-constant
$*dynamic-or-global
$.public-accessor
$!private-attribute
$^positional-param
$:named-parameter
$=pod-info
$<named-match-capture>
$~slang-variable



    Composers



[ ] array
{ } block/hash
< > quotewords
(,) list
:() signature
\() capture



    Automatic dereference



&($foo)(1,2)     == $foo(1,2)
@($foo)[1]       == $foo[1]
%($foo){'bar'}   == $foo<bar>
@(@($foo)[1])[2] == $foo[1][2]



    Control syntax



for LIST { }                # implicit $_ arg
for LIST -> $a, $b { }   # explicit args
while/until EXPR { }
repeat while/until EXPR { } # do at least once
loop { }   loop (a;b;c) { } # parens required!
if EXPR { } elsif EXPR { } else { }    # truthy
with EXPR { } orwith EXPR { } else { } # defined
given EXPR { when EXPR { } default { } }
EXPR if EXPR for LIST;      # list comprehension
next, last, redo            # loop controls
proceed, succeed            # switch controls



    Operator precedence



.method .[] i
++ --
**
unary + - ~ ! ? ^
* / % %% div
+ -
x xx
~
&
| ^
temp let
<=> leg cmp .. but
~~ > == gt eq === eqv !op
&&
|| ^^ // min max
??!! ff
= := op= =>
so not
, :
X Xop Z Zop ...
say die map etc
and
or xor
<== ==>



    Scope declarators



       my  lexical scope
      our  package scope
      has  instance scope
     anon  no scope at all
    state  persistent lexical
  augment  benign parasitic
supersede  deadly parasitic



    Types



Bit Int Rat FatRat UInt Num Complex int8 int32 complex64 etc.
Str Buf Blob Uni NFC NFD NFKC NFKD buf8 buf16 buf32 utf8
IO Mu Any Cool Junction Supply Whatever Slip Empty
List Capture Signature
Pair Range Set Bag Mix
SetHash BagHash MixHash
Scalar Array Hash Code
Enum Bool Order Signal
Block Routine Sub
Method Regex Match
Nil Failure Exception
Instant Duration
Date DateTime



    Operator domains



 Numeric: ==  !==(!=) + <      >     <=> <=     >=
 Stringy: eq  !eq(ne) ~ lt     gt    leg le     ge
         Value: eqv  !eqv     before after cmp !after !before
ObjectID: === !===



    Metaoperators



[op] reduce listop to A op B op C...
op=  A = A op B
!op  !(A op B)
»op« hyper/vectorize
Zop  zip with op
Xop  cross with op
Rop  reverse args
Sop  sequentialize



    Special variables



$_     current topic
$/     regex result
$!     error object
@*ARGS command line
@*INC  include path
%*ENV  environment
$*PID  process id



    Regex metachars



^ $    string begin/end
^^ $$  line begin/end
+      one or more
*      zero or more
?      zero or one
**1..3 repeat in range
()     capture to $0,$1
[]     no capture
<foo>  subrule
<[]>   character class
|      parallel or
||     serial or
« »    word boundary



    Regex modifiers



:i   ignore case
:m   ignore marks
:g   global
:r   ratchet
:s   sigspace
:4th nth occurrence
:4x  n times



    Regex charclasses



 . == anychar, \N non \n
\s == <space>, \S non
\d == <digit>, \D non
\w == <+alpha+digit+[_]>



    Links



 perl6.org <http://perl6.org/>
 rakudo.org <http://rakudo.org/>



    IRC on irc.freenode.net



#perl6
#perl6-dev
#moarvm


